{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","to","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","onChange","event","target","value","showAlert","backgroundColor","toUpperCase","split","length","About","border","myStyle","setMyStyle","btntext","setBtnText","console","log","prototypes","title","PropTypes","string","aboutText","defaultProps","Alert","alert","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.15e8f05f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { checkPropTypes } from \"prop-types\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Navbar\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">\n                About\n              </Link>\n            </li>\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-success\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n\n          <div\n            className={`form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              role=\"switch\"\n              id=\"flexSwitchCheckDefault\"\n              onClick={props.toggleMode}\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable DarkMode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.prototypes = {\n  title: PropTypes.string,\n  aboutText: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  title: \"abouttext\",\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    setText(text.toUpperCase());\n  };\n\n  const handleOnChange = (event) => {\n    setText(event.target.value);\n    props.showAlert(\"Converted to uppercase\", \"success\");\n  };\n\n  const [text, setText] = useState(\"Enter text here\");\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h1> {props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            id=\"myBox\"\n            rows=\"8\"\n            onChange={handleOnChange}\n            value={text}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\n            }}\n          ></textarea>\n        </div>\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\n          Convert to uppercase\n        </button>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h1>Your text summary</h1>\n        <p>\n          {text.split(\" \").length} words and {text.length} characters{\" \"}\n        </p>\n        <p> {0.08 * text.split(\" \").length} Minutes to read</p>\n      </div>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function About() {\n  const [myStyle, setMyStyle] = useState({\n    color: \"white\",\n    backgroundColor: \"black\",\n    border: \"1px solid white\",\n  });\n\n  const [btntext, setBtnText] = useState(\"Enable Light Mode\");\n\n  const toggleStyle = () => {\n    console.log(\"toggle button clicked\");\n    if (myStyle.color == \"white\") {\n      setMyStyle({\n        color: \"black\",\n        backgroundColor: \"white\",\n        border: \"1px solid white\",\n      });\n      setBtnText(\"Enable Dark Mode\");\n    } else {\n      setMyStyle({\n        color: \"white\",\n        backgroundColor: \"black\",\n      });\n      setBtnText(\"Enable Light Mode\");\n    }\n  };\n\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h1 className=\"my-2\">About Us</h1>\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n        <div className=\"accordion-item\" style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n              style={myStyle}\n            >\n              Accordion Item #1\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\" style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n              style={myStyle}\n            >\n              Accordion Item #2\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the second item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\" style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n              style={myStyle}\n            >\n              Accordion Item #3\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\">\n              <strong>This is the third item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classes that we use to style each element. These classes control\n              the overall appearance, as well as the showing and hiding via CSS\n              transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container\" style={myStyle}>\n        <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">\n          {btntext}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase;\n    return lower.chartAt(0).toUpperCase() + lower.slice(1);\n  };\n\n  return (\n    props.alert && (\n      <div\n        className={`alert alert-${props.alert.type}  fade show`}\n        role=\"alert\"\n      >\n        <strong> {props.alert.type}</strong>: {props.alert.msg}\n      </div>\n    )\n  );\n}\n\nexport default Alert;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode == \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark Mode has been activated\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been activated\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                heading=\"Enter the text to analyze below\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}